---
import BaseLayout from '../layouts/BaseLayout.astro';
import Banner from '../components/Banner.astro';
// Load fetched scholar records if present
let scholarRecords: any[] = [];
try {
  const res = await fetch(`${import.meta.env.BASE_URL}data/scholar-record.json`);
  if (res.ok) {
    const data = await res.json();
    scholarRecords = Array.isArray(data) ? data : [];
  }
} catch (e) {
  scholarRecords = [];
}

// Build publications from DBLP API (Wen-Chih Peng)
let publications: { year: number; papers: any[] }[] = [];
try {
  const resp = await fetch('https://dblp.org/search/publ/api?q=Wen-Chih%20Peng&format=json&h=1000');
  if (resp.ok) {
    const dblp = await resp.json();
    const hits = Array.isArray(dblp?.result?.hits?.hit) ? dblp.result.hits.hit : [];
    const targetPid = '92/1623';

    const hasTargetPid = (authorsObj: any): boolean => {
      const a = authorsObj?.author;
      if (!a) return false;
      const arr = Array.isArray(a) ? a : [a];
      return arr.some((x: any) => {
        if (x && typeof x === 'object') {
          const pid = x['@pid'] ?? x.pid;
          return pid === targetPid;
        }
        return false;
      });
    };

    const filteredHits = hits.filter((h: any) => hasTargetPid(h?.info?.authors));

    const normalizeType = (t: string | undefined): 'Conference' | 'Journal' | 'Other' => {
      if (!t) return 'Other';
      const s = t.toLowerCase();
      if (s.includes('journal')) return 'Journal';
      if (s.includes('conference')) return 'Conference';
      return 'Other';
    };

    const parseAuthors = (authorsObj: any): string[] => {
      const a = authorsObj?.author;
      if (!a) return [];
      if (Array.isArray(a)) return a.map((x: any) => x?.text ?? String(x));
      return [a?.text ?? String(a)];
    };

    const entries = filteredHits.map((h: any) => h.info).map((info: any) => {
      const yearNum = Number(info?.year) || new Date().getFullYear();
      const authors = parseAuthors(info?.authors);
      const type = normalizeType(info?.type);
      const key = String(info?.key || '').replace(/[\\/]/g, '_') || `entry_${yearNum}`;
      const doiUrl = info?.doi ? `https://doi.org/${info.doi}` : undefined;
      const eeUrl = typeof info?.ee === 'string' ? info.ee : undefined;
      const link = eeUrl || doiUrl || '#';
      const venue = info?.venue || info?.journal || '';
      const isJournal = type === 'Journal';
      const bibtexType = isJournal ? 'article' : 'inproceedings';
      const bibVenueKey = isJournal ? 'journal' : 'booktitle';

      const bibtex = `@${bibtexType}{${key},\n  title={${info?.title || ''}},\n  author={${authors.join(' and ')}},\n  year={${yearNum}},\n  ${bibVenueKey}={${venue}}\n}`;

      return {
        title: info?.title || 'Untitled',
        authors,
        venue,
        type,
        abstract: '',
        pdf: link,
        code: '',
        bibtex
      };
    });

    const yearToPapers = new Map<number, any[]>();
    for (const e of entries) {
      const y = Number((e as any).year) || undefined;
      const yearFromBib = /year=\{(\d{4})\}/.exec((e as any).bibtex)?.[1];
      const year = y || (yearFromBib ? Number(yearFromBib) : undefined) || new Date().getFullYear();
      const arr = yearToPapers.get(year) || [];
      arr.push(e);
      yearToPapers.set(year, arr);
    }

    const typeRank = (t: string): number => {
      if (t === 'Journal') return 0;
      if (t === 'Conference') return 1;
      return 2; // Other/Workshop
    };

    publications = Array.from(yearToPapers.entries())
      .sort((a, b) => b[0] - a[0])
      .map(([year, papers]) => ({
        year,
        papers: papers.slice().sort((p1: any, p2: any) => typeRank(p1.type) - typeRank(p2.type))
      }));
  }
} catch (e) {
  publications = [];
}

const venues = ["All", "Journal", "Conference"];
const years = publications.map((g) => g.year);
---

<BaseLayout 
  pageTitle="Publications"
  description="Research publications from NYCU ADSL Lab"
>
  <div class="bg-white">
    <!-- Hero Section -->
    <Banner 
      title="Publications"
      subtitle="Our research contributions published in top-tier conferences and journals in AI, ML, Data Mining, and related fields."
      imageUrl="https://images.unsplash.com/photo-1524995997946-a1c2e315a42f?auto=format&fit=crop&w=2134&q=80"
      heightClass="py-20"
      overlayClass="bg-black/60"
    />
    
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-16">

      <!-- Google Scholar (Auto-fetched) -->
      {scholarRecords.length > 0 && (
        <section class="mb-16">
          <div class="text-center mb-12">
            <h2 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-4">Google Scholar (Auto-fetched)</h2>
            <div class="w-24 h-1 bg-gradient-to-r from-blue-600 to-indigo-600 mx-auto mb-6"></div>
            <p class="text-xl text-gray-600 max-w-3xl mx-auto">Updated automatically from Google Scholar via workflow</p>
          </div>
          <div class="space-y-6">
            {scholarRecords.map((rec) => (
              <article class="bg-white rounded-2xl shadow-lg border p-8 hover:shadow-2xl transition-all duration-300">
                <h3 class="text-xl font-semibold text-gray-900 mb-2">{rec.title}</h3>
                <div class="text-gray-600 mb-2"><strong>Authors:</strong> {Array.isArray(rec.authors)
                  ? rec.authors.map((name: any, i: number) => (
                      <span>{i > 0 ? ', ' : ''}{name === 'Wen-Chih Peng' ? <strong>{name}</strong> : name}</span>
                    ))
                  : (rec.authors === 'Wen-Chih Peng' ? <strong>Wen-Chih Peng</strong> : rec.authors)
                }</div>
                {rec.journal && (<div class="text-gray-600 mb-2"><strong>Venue:</strong> {rec.journal}</div>)}
                {rec.date && rec.date.length > 0 && (
                  <div class="text-gray-600 mb-2"><strong>Date:</strong> {rec.date.filter(Boolean).join('-')}</div>
                )}
                {typeof rec.citations === 'number' && (
                  <div class="text-gray-600 mb-2"><strong>Citations:</strong> {rec.citations}</div>
                )}
                {rec.description && (<p class="text-gray-600 mb-3">{rec.description}</p>)}
                <div class="flex gap-3 mt-2">
                  {rec.link && (<a href={rec.link} class="text-blue-600 hover:text-blue-800">üîó Link</a>)}
                </div>
              </article>
            ))}
          </div>
        </section>
      )}

      <!-- Filters -->
      <section class="mb-12">
        <div class="bg-white rounded-2xl shadow-lg border p-6">
          <div class="flex flex-wrap gap-6 items-center">
            <div class="flex items-center space-x-3">
              <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/>
              </svg>
              <span class="text-gray-700 font-semibold">Filter Publications:</span>
            </div>
            
            <div class="flex flex-wrap gap-3">
              <span class="text-sm text-gray-600 font-medium">Type:</span>
              {venues.map((venue, index) => (
                <button 
                  class={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 ${
                    index === 0 
                      ? 'bg-blue-600 text-white shadow-lg' 
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-md'
                  }`}
                  data-filter-type={venue.toLowerCase()}
                >
                  {venue}
                </button>
              ))}
            </div>
            
            <div class="flex items-center gap-3">
              <span class="text-sm text-gray-600 font-medium">Year:</span>
              <select id="year-filter" class="px-4 py-2 border border-gray-300 rounded-lg text-sm bg-white hover:border-blue-500 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-colors">
                <option value="all">All Years</option>
                {years.map((year) => (
                  <option value={year}>{year}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </section>

  <!-- Publications by Year -->
  <section>
    {publications.map((yearGroup) => (
      <div class="mb-12" data-year={yearGroup.year}>
        <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
          <span class="bg-blue-600 text-white px-3 py-1 rounded-lg mr-3">{yearGroup.year}</span>
        </h2>
        
        <div class="space-y-6">
          {yearGroup.papers.map((paper, index) => (
            <article class={`bg-white rounded-2xl shadow-lg border p-8 hover:shadow-2xl transition-all duration-300 hover:-translate-y-1`} data-type={paper.type.toLowerCase()}>
              <div class="flex flex-wrap items-start justify-between mb-4">
                <div class="flex items-center space-x-3 mb-2">
                  <span class={`px-2 py-1 rounded text-xs font-medium ${
                    paper.type === 'Conference' 
                      ? 'bg-blue-100 text-blue-800'
                      : paper.type === 'Journal'
                      ? 'bg-green-100 text-green-800'
                      : 'bg-purple-100 text-purple-800'
                  }`}>
                    {paper.type}
                  </span>
                  {paper.award && (
                    <span class="bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-xs font-medium">
                      üèÜ {paper.award}
                    </span>
                  )}
                </div>
              </div>
              
              <h3 class="text-xl font-semibold text-gray-900 mb-3">{paper.title}</h3>
              
              <div class="text-gray-600 mb-3">
                <strong>Authors:</strong> {paper.authors.map((name: string, i: number) => (
                  <span>{i > 0 ? ', ' : ''}{name === 'Wen-Chih Peng' ? <strong>{name}</strong> : name}</span>
                ))}
              </div>
              
              <div class="text-gray-600 mb-4">
                <strong>Venue:</strong> {paper.venue}
              </div>
              
              <p class="text-gray-600 mb-6">{paper.abstract}</p>
              
              <div class="flex flex-wrap gap-3">
                <a href={paper.pdf} class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm">
                  üìÑ PDF
                </a>
                {paper.code && (
                  <a href={paper.code} class="border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors text-sm">
                    üíª Code
                  </a>
                )}
                <button class="border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors text-sm" onclick={`toggleBibtex('bibtex-${yearGroup.year}-${index}')`}>
                  üìö BibTeX
                </button>
              </div>
              
              <!-- BibTeX (hidden by default) -->
              <div id={`bibtex-${yearGroup.year}-${index}`} class="hidden mt-4 p-4 bg-gray-100 rounded-lg">
                <pre class="text-sm text-gray-800 whitespace-pre-wrap font-mono">{paper.bibtex}</pre>
                <button class="mt-2 text-blue-600 hover:text-blue-800 text-sm" onclick={`copyBibtex('bibtex-${yearGroup.year}-${index}')`}>
                  üìã Copy to Clipboard
                </button>
              </div>
            </article>
          ))}
        </div>
      </div>
    ))}
  </section>
    </div>
  </div>
</BaseLayout>

<script>
  function toggleBibtex(id: string) {
    const element = document.getElementById(id);
    if (element) {
      element.classList.toggle('hidden');
    }
  }
  
  function copyBibtex(id: string) {
    const element = document.getElementById(id);
    if (element) {
      const bibtexText = element.querySelector('pre')?.textContent;
      if (bibtexText) {
        navigator.clipboard.writeText(bibtexText).then(() => {
          // Show a brief success message
          const button = element.querySelector('button');
          if (button) {
            const originalText = button.textContent;
            button.textContent = '‚úì Copied!';
            setTimeout(() => {
              button.textContent = originalText;
            }, 2000);
          }
        });
      }
    }
  }

  // Filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('[data-filter-type]');
    const publications = document.querySelectorAll('[data-type]');
    const yearSelect = document.getElementById('year-filter') as HTMLSelectElement | null;
    const yearGroups = document.querySelectorAll('[data-year]');

    const updateCounts = () => {
      yearGroups.forEach(group => {
        if (!(group instanceof HTMLElement)) return;
        const container = group.querySelector('.space-y-6');
        const visible = container ? Array.from(container.children).filter((el) => {
          return el instanceof HTMLElement && el.style.display !== 'none';
        }).length : 0;
        const countEl = group.querySelector('.pub-count');
        if (countEl) countEl.textContent = String(visible);
      });
    };
    
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filterType = button.getAttribute('data-filter-type');
        
        // Update button styles
        filterButtons.forEach(btn => {
          if (btn === button) {
            btn.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-blue-600 text-white';
          } else {
            btn.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-gray-100 text-gray-700 hover:bg-gray-200';
          }
        });
        
        // Filter publications
        publications.forEach(pub => {
          if (pub instanceof HTMLElement) {
            const pubType = pub.getAttribute('data-type');
            if (filterType === 'all' || pubType === filterType) {
              pub.style.display = 'block';
            } else {
              pub.style.display = 'none';
            }
          }
        });

        updateCounts();
      });
    });

    if (yearSelect) {
      yearSelect.addEventListener('change', () => {
        const selected = yearSelect.value;
        yearGroups.forEach(group => {
          if (group instanceof HTMLElement) {
            const groupYear = group.getAttribute('data-year');
            group.style.display = (selected === 'all' || groupYear === selected) ? 'block' : 'none';
          }
        });

        updateCounts();
      });
    }

    // Initial count sync
    updateCounts();
  });

  // Make functions globally available
  (window as any).toggleBibtex = toggleBibtex;
  (window as any).copyBibtex = copyBibtex;
</script>
</script>