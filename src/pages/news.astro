---
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import Banner from '../components/Banner.astro';
import NewsSummaryCard from '../components/NewsSummaryCard.astro';
import NewsDetailCard from '../components/NewsDetailCard.astro';

const allNews = await getCollection('news');
const items = await Promise.all(
  allNews
    .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
    .map(async (entry) => {
      const { Content } = await entry.render();
      return { ...entry, Content };
    })
);

const tagSet = ["Publication", "Event"];
const tags = ['All', ...Array.from(tagSet)];
---

<BaseLayout 
  pageTitle="News"
  description="Latest news and updates from NYCU ADSL Lab"
>
  <div class="bg-white">
    <!-- Hero Section -->
    <Banner 
      title="Lab News & Updates"
      subtitle="Stay updated with the latest developments, achievements, and announcements from our lab."
      imageUrl="https://images.unsplash.com/photo-1495020689067-958852a7765e?auto=format&fit=crop&w=2134&q=80"
      heightClass="py-20"
      overlayClass="bg-black/60"
    />
    
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <!-- Filter Buttons -->
      <div class="mb-12">
        <div class="bg-white rounded-2xl shadow-lg border p-6">
          <div class="flex flex-wrap justify-center gap-3" role="tablist">
            {tags.map((tag, index) => (
              <button 
                class={`px-6 py-3 rounded-full text-sm font-medium transition-all duration-200 ${
                  index === 0 
                    ? 'bg-blue-600 text-white shadow-lg' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-md'
                }`}
                data-filter={tag.toLowerCase()}
                role="tab"
              >
                {tag}
              </button>
            ))}
          </div>
        </div>
      </div>

      <div class="grid gap-8" id="news-list">
        {items.map((item) => (
          <div class="space-y-4" data-news-wrapper data-tag={item.data.tag.toLowerCase()}>
            <NewsSummaryCard 
              id={item.id}
              title={item.data.title}
              date={item.data.date}
              tag={item.data.tag}
              summary={item.data.summary ?? ''}
            />
            <div class="hidden" data-news-detail-wrapper>
              <NewsDetailCard 
                id={item.id}
                title={item.data.title}
                date={item.data.date}
                tag={item.data.tag}
                Content={item.Content}
              />
            </div>
          </div>
        ))}
      </div>

      <!-- Modal Overlay -->
      <div id="news-modal" class="fixed inset-0 bg-black/50 z-50 hidden">
        <div class="w-full h-full flex items-center justify-center p-4">
          <div class="relative w-full max-h-[90vh] overflow-y-auto pt-10" data-modal-card>
            <button id="news-modal-close" class="absolute top-0 right-2 inline-flex items-center justify-center w-10 h-10 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 shadow-lg" aria-label="Close">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/></svg>
            </button>
            <div id="news-modal-content"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const wrappers = document.querySelectorAll('[data-news-wrapper]');
    const modal = document.getElementById('news-modal') as HTMLElement;
    const modalContent = document.getElementById('news-modal-content') as HTMLElement;
    const modalClose = document.getElementById('news-modal-close') as HTMLButtonElement;
    const filterButtons = document.querySelectorAll('[data-filter]');
    const modalCard = modal.querySelector('[data-modal-card]') as HTMLElement;
    let currentSummary: HTMLElement | null = null;

    function setModalWidthFromSummary(summaryEl: HTMLElement | null) {
      if (!summaryEl || !modalCard) return;
      const targetWidth = (summaryEl as HTMLElement).offsetWidth;
      const maxWidth = Math.max(320, Math.min(targetWidth, window.innerWidth - 32));
      modalCard.style.width = `${maxWidth}px`;
      modalCard.style.maxWidth = 'calc(100vw - 2rem)';
    }

    function openModal(html: string, summaryEl?: HTMLElement) {
      modalContent.innerHTML = html;
      modal.classList.remove('hidden');
      document.documentElement.classList.add('overflow-hidden');
      document.body.classList.add('overflow-hidden');
      currentSummary = summaryEl ?? null;
      setModalWidthFromSummary(currentSummary);
    }

    function closeModal() {
      modal.classList.add('hidden');
      modalContent.innerHTML = '';
      document.documentElement.classList.remove('overflow-hidden');
      document.body.classList.remove('overflow-hidden');
      currentSummary = null;
      if (modalCard) {
        modalCard.style.width = '';
      }
    }

    wrappers.forEach((wrapper) => {
      const summary = wrapper.querySelector('[data-role="summary-card"]');
      const detailWrapper = wrapper.querySelector('[data-news-detail-wrapper]');
      summary?.addEventListener('click', () => {
        const detailHTML = (detailWrapper as HTMLElement).innerHTML;
        openModal(detailHTML, summary as HTMLElement);
      });
    });

    modal.addEventListener('click', (e) => {
      if (!modalCard.contains(e.target as Node)) closeModal();
    });
    modalClose.addEventListener('click', closeModal);
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') closeModal();
    });

    window.addEventListener('resize', () => {
      if (!modal.classList.contains('hidden')) {
        setModalWidthFromSummary(currentSummary);
      }
    });

    // Tag filtering
    function applyFilter(tagValue: string) {
      const value = tagValue.toLowerCase();
      wrappers.forEach((wrapper) => {
        const t = (wrapper as HTMLElement).dataset.tag || '';
        const show = value === 'all' || t === value;
        (wrapper as HTMLElement).style.display = show ? 'block' : 'none';
      });
    }

    filterButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        const selected = (btn as HTMLElement).getAttribute('data-filter') || 'all';
        // Update button styles
        filterButtons.forEach((b) => {
          if (b === btn) {
            (b as HTMLElement).className = 'px-6 py-3 rounded-full text-sm font-medium transition-all duration-200 bg-blue-600 text-white shadow-lg';
          } else {
            (b as HTMLElement).className = 'px-6 py-3 rounded-full text-sm font-medium transition-all duration-200 bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-md';
          }
        });
        applyFilter(selected);
      });
    });

    // Default filter: All
    applyFilter('all');
  });
</script>